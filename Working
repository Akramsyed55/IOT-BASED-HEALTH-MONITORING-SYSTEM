DHT11 Sensor Reader
* This sketch reads temperature and humidity data from the DHT11 sensor and
prints the values to the serial port.
* It also handles potential error states that might occur during reading.
Version: 2.1.0
License: MIT
// Include the DHT11 library for interfacing with the sensor.

#include <DHT11.h>

// Create an instance of the DHT11 class.
// - For Arduino: Connect the sensor to Digital I/O Pin 2.27
// - For ESP32: Connect the sensor to pin GPIO2 or P2.
// - For ESP8266: Connect the sensor to GPIO2 or D4.

DHT11 dht11(2);

int PulseSensorPurplePin = 0; // Pulse Sensor PURPLE WIRE connected to
ANALOG PIN 0
int LED = LED_BUILTIN; // The on-board Arduion LED

int Signal; // holds the incoming raw data. Signal value can range from 0-
1024
int Threshold = 580; // Determine which Signal to "count as a beat", and which to
ingore.

void setup() {

// Initialize serial communication to allow debugging and data readout.
// Using a baud rate of 9600 bps.

Serial.begin(9600);
// Uncomment the line below to set a custom delay between sensor readings (in
milliseconds).

// dht11.setDelay(500); // Set this to the desired delay. Default is 500ms.
pinMode(LED,OUTPUT); // pin that will blink to your heartbeat!
Serial.begin(115200); // Set's up Serial Communication at certain speed.

}
void loop() {

int temperature = 0;
int humidity = 0;

// Attempt to read the temperature and humidity values from the DHT11 sensor.
int result = dht11.readTemperatureHumidity(temperature, humidity);
// Check the results of the readings.
// If the reading is successful, print the temperature and humidity values.
// If there are errors, print the appropriate error messages.

if (result == 0) {
Serial.print("Temperature: ");
Serial.print(temperature);
Serial.print(" Â°C\tHumidity: ");
Serial.print(humidity);
Serial.println(" %");
}
else {
// Print error message based on the error code.
Serial.println(DHT11::getErrorString(result));
}
Signal = analogRead(PulseSensorPurplePin); // Read the PulseSensor's value.
// Assign this value to the "Signal" variable.28

Serial.println("Signal " + String(Signal)); // Send "reading " followed by the Signal
value to Serial Plotter.

if(Signal > Threshold){ 
// If the signal is above "550", then "turn-on"
Arduino's on-Board LED.
digitalWrite(LED,HIGH);
} 
else {
digitalWrite(LED,LOW); // Else, the sigal must be below "550", so "turn-
off" this LED.
}

delay(20);
}
